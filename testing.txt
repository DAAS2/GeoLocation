"""
ASGI config for geolocation_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""
import os

from channels.routing import ProtocolTypeRouter
from django.core.asgi import get_asgi_application
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter , URLRouter
from geolocation_project import route

django_asgi_app = get_asgi_application()


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "geolocation_project.settings")

application = ProtocolTypeRouter(
    {
        "http" : get_asgi_application() , 
        "websocket" : AuthMiddlewareStack(
            URLRouter(
                route.websocket_urlpatterns
            )    
        )
    }
)


ASGI_APPLICATION = 'geolocation.asgi.application'

/////////////////////////////////////////////////////////////////////////////////////////////

document.addEventListener('DOMContentLoaded', function() {
    trackLocation();
    // Add event listener to connect to chat button
    document.getElementById('connectToChatButton').addEventListener('click', function() {
        Chat(); // Start chat function when the button is clicked
    });

    // Initialise map
    async function initMap(position) {
            console.log('Latitude:', position.coords.latitude);
            console.log('Longitude:', position.coords.longitude);
            console.log('Accuracy:', position.coords.accuracy);

            // User location coordinates
            const userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            // Create Google map with user location
            const map = new google.maps.Map(document.getElementById("map"), {
                mapId: "8e0a97af9386fef",
                zoom: 15,
                center: userLocation,
                disableDefaultUI: true
            });

            // Create marker 
            const marker = new google.maps.Marker({
                position: userLocation,
                map: map,
            });

            // Display accuracy on the map or somewhere on the webpage
            const accuracyElement = document.getElementById('accuracy');
            if (accuracyElement) {
                accuracyElement.innerText = `Accuracy: ${position.coords.accuracy} meters`;
            }
        } 
    

        function trackLocation() {
            navigator.geolocation.watchPosition(
                (position) => {
                    initMap(position);
                    // Send child's location to the server
                    sendLocationToServer(position.coords.latitude, position.coords.longitude);
                },
                (error) => {
                    console.error("Geolocation error:", error);
                    alert("Geolocation failed. Please enable location services and try again.");
                }, 
                {
                    enableHighAccuracy: true,
                    maximumAge: 0
                }
            );
        }
        
        // Function to send location data to the server
        async function sendLocationToServer(latitude, longitude) {
            try {
                const response = await fetch('/update_location/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': 'csrfToken' // Include the CSRF token in the headers
                    },
                    body: JSON.stringify({
                        latitude: latitude,
                        longitude: longitude
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to send location to server.');
                }

                // If response is successful, log the result
                const data = await response.json();
                console.log(data);
            } catch (error) {
                console.error('Error:', error);
            }
        }


    // Chat 
    function Chat() {
        // Connect to chat
        try {
            const chatSocket = new WebSocket("ws://" + window.location.host + "/");

            // If connected successfully
            chatSocket.onopen = function(e) {
                console.log("The connection was setup successfully!");
            };

            chatSocket.onclose = function(e) {
                console.log("WebSocket connection was closed unexpectedly.");
            };

            chatSocket.onerror = function(error) {
                console.log("An error occurred with the WebSocket connection.");
            };

            // Get message text
            document.querySelector("#id_message_send_input").focus();
            document.querySelector("#id_message_send_input").onkeyup = function(e) {
                if (e.keyCode == 13) {
                    document.querySelector("#id_message_send_button").click();
                }
            };

            // When button clicked then send message and username
            document.querySelector("#id_message_send_button").onclick = function(e) {
                var messageInput = document.querySelector("#id_message_send_input").value;

                if (messageInput.trim() === "") {
                    alert("Message cannot be empty.");
                    return;
                }

                chatSocket.send(JSON.stringify({ message: messageInput, username: "{{request.user.username}}" }));
            };

            // Parse the message and username and create the write CSS for it
            chatSocket.onmessage = function(e) {
                try {
                    const data = JSON.parse(e.data);
                    var div = document.createElement("div");
                    div.innerHTML = '<div class="card message-card mb-2 user-message">' + 
                                    '<div class="card-body d-flex justify-content-between">' + 
                                        '<p class="card-text mb-0" >' + data.message + '</p>' + 
                                        '<p class="card-text text-muted mb-0 timestamp small">' + new Date().toISOString().slice(0, 19).replace('T', ' ') + '</p>' +
                                    '</div>' + 
                                    '</div>';
                    document.querySelector("#id_message_send_input").value = "";
                    document.querySelector("#id_chat_item_container").appendChild(div);
                } catch (error) {
                    console.log('An error occurred while processing a received message.');
                }
            };
        } catch (error) {
            console.log('An error occurred while setting up the chat system.');
        }
    }
});

from django.urls import path , include
from geolocation_app.consumer import ChatConsumer

# Here, "" is routing to the URL ChatConsumer which 
# will handle the chat functionality.
websocket_urlpatterns = [
    path("" , ChatConsumer.as_asgi()) , 
] 
